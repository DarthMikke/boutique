---
- name: Deploy to production
  hosts:
    - boutique
  gather_facts: false
  vars:
    container_name: boutique
    project_dir: "/srv/boutique"
    public_dir: "/srv/webprojects/boutique/public"
    envvars:
      DJANGO_DEBUG: "True"
      SECRET_KEY: "django-insecure-lwyh*yitd$0=k3uo2)oiqz6()yqi4d9t9l-u!1#&caz6l43tfh"
      ALLOWED_HOSTS: "*"
      CSRF_TRUSTED_ORIGINS: "http://*:*,https://*:*"
      MEDIA_ROOT: "/app/uploads/"
      DB_NAME: "/db/db.sqlite3"
  tasks:
    - name: Ensure project directory exists
      ansible.builtin.file:
        path: "{{ project_dir }}"
        state: directory
        mode: "0775"
    - name: Create the env file
      ansible.builtin.template:
        src: env.j2
        dest: "{{ project_dir }}/.env"
        mode: "0664"
    - name: Ensure database file exists
      ansible.builtin.file:
        path: "{{ project_dir }}/db.sqlite3"
        state: touch
        mode: "0664"
    - name: Ensure public directory exists
      ansible.builtin.file:
        path: "{{ public_dir }}"
        state: directory
        group: www-data
        mode: "0775"
    - name: Create container with new image
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: ghcr.io/darthmikke/boutique
        volumes:
          - "{{ project_dir }}/.env:/app/.env"
          - "{{ project_dir }}/db.sqlite3:{{ envvars.DB_NAME }}"
          - "{{ public_dir }}:/app/public"
        restart_policy: always
        networks:
          - name: rproxy
        state: started
        detach: true
    - name: Migrate
      community.docker.docker_container_exec:
        container: "{{ container_name }}"
        argv:
          - /run.sh
          - migrate
    - name: Ensure a superuser exists
      community.docker.docker_container_exec:
        container: "{{ container_name }}"
        argv:
          - /run.sh
          - createsuperuser
          - --username
          - admin
          - --email
          - admin@example.com
          - --noinput
        env:
          DJANGO_SUPERUSER_PASSWORD: "password1234"
      ignore_errors: true
      register: ignore_errors_register
    - name: Copy static files
      community.docker.docker_container_exec:
        container: "{{ container_name }}"
        argv:
          - /run.sh
          - collectstatic
          - --noinput
    - name: Stop the app
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: stopped
    - name: Restart the app
      community.docker.docker_container:
        name: "{{ container_name }}"
        state: started
